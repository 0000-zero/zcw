<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0"
         metadata-complete="false">

    <!--
        1、字符编码filter： CharacterEncodingFilter
        2、restful filter： HiddenHttpMethodFilter
			可以将post方式提交的携带_method=xxx参数的请求转为method参数值对应的请求方式
        3、DispatcherServlet： 前端控制器，初始化springmvc容器
        4、ContextLoaderListener：初始化spring容器
     -->

    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <!--
                /  和 /*的区别：
               /*代表拦截所有请求 ， filter使用
               /代表拦截非jsp页面的请求，servlet中使用/
        -->
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>DispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <!-- 将spring和springmvc的容器创建都交由springmvc容器管理 -->
            <param-value>
                classpath:spring/springmvc.xml
                classpath*:spring/spring-*.xml
            </param-value>
        </init-param>
        <load-on-startup>0</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>DispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--    <listener>-->
<!--        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>-->
<!--    </listener>-->
<!--    <context-param>-->
<!--        <param-name>contextConfigLocation</param-name>-->
<!--        <param-value>classpath*:spring/spring-*.xml</param-value>-->
<!--    </context-param>-->

    <!-- 注册listener 监听器 -->
    <listener>
        <listener-class>com.atzcw.zcw.listener.AppStartupListener</listener-class>
    </listener>

    <!-- 配置springsecurity的filter -->
<!--    <filter>-->
<!--        &lt;!&ndash;名称固定,不能变&ndash;&gt;-->
<!--        <filter-name>springSecurityFilterChain</filter-name>-->
<!--        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>-->
<!--    </filter>-->
<!--    <filter-mapping>-->
<!--        <filter-name>springSecurityFilterChain</filter-name>-->
<!--        <url-pattern>/*</url-pattern>-->
<!--    </filter-mapping>-->


</web-app>
